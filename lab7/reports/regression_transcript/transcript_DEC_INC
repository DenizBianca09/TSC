# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5c Compiler 2017.01 Jan 23 2017
# Start time: 09:23:00 on Apr 08,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Note: ../lab01_testbench-interface/instr_register_test.sv(159): (vlog-13177) Promoting concatenation '{opcode,operand_a,operand_b,...}' to an assignment pattern:  Unsized literal found.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 09:23:00 on Apr 08,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GWR_ORDER=2 -GRD_ORDER=1 -GRD_NR=30 -GWRITE_NR=50 
# Start time: 09:23:00 on Apr 08,2024
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# Total tests passed: 0
# Total tests failed: 0
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Writing to register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Writing to register location 29: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
# Writing to register location 3: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
# Writing to register location 28: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# 
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# Writing to register location 6: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# 
# Writing to register location 7: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
# 
# Writing to register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
# 
# Writing to register location 9: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# Writing to register location 14: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
# Writing to register location 20: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
# 
# Writing to register location 12: 
#   opcode = 1 (PASSA)
#   operand_a = -8
#   operand_b = 12
# 
# Writing to register location 1: 
#   opcode = 1 (PASSA)
#   operand_a = -4
#   operand_b = 1
# 
# Writing to register location 17: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
# 
# Writing to register location 15: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 5
# 
# Writing to register location 7: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 7
# 
# Writing to register location 14: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
# 
# Writing to register location 18: 
#   opcode = 4 (SUB)
#   operand_a = -11
#   operand_b = 11
# 
# Writing to register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 12
# 
# Writing to register location 11: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 2
# 
# Writing to register location 21: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# 
# Writing to register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 9
# 
# Writing to register location 8: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
# 
# Writing to register location 24: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 13
# 
# Writing to register location 22: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 6
# 
# Writing to register location 5: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
# 
# Writing to register location 27: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 15
# 
# Writing to register location 13: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 13
# 
# Writing to register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# Writing to register location 30: 
#   opcode = 7 (MOD)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 15: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 15
# 
# Writing to register location 31: 
#   opcode = 5 (MULT)
#   operand_a = -3
#   operand_b = 7
# 
# Writing to register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 13
# 
# Writing to register location 24: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 8
# 
# Writing to register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = -8
#   operand_b = 2
# 
# Writing to register location 4: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 1
# 
# Writing to register location 25: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 9
# 
# Writing to register location 25: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 14
# 
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = -2
#   operand_b = 13
# 
# Writing to register location 30: 
#   opcode = 4 (SUB)
#   operand_a = -3
#   operand_b = 14
# 
# Writing to register location 22: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 1
# 
# Writing to register location 10: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 11
# 
# Writing to register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 12
# 
# Writing to register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 13
# 
# Writing to register location 13: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 0
# 
# Writing to register location 30: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
# Writing to register location 16: 
#   opcode = 5 (MULT)
#   operand_a = -14
#   operand_b = 15
# 
# Writing to register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 13
# 
# Writing to register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 0
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check PASSED: Calculated result matches DUT result. Opcode: PASSB, OpA: 13, OpB: 0, Expected Result: 0
# Total tests passed: 1
# Total tests failed: 0
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 13
# 
#   rezultat = -9
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: -9, OpB: 13, Expected: 0, Received: -9
# Total tests passed: 1
# Total tests failed: 1
# Read from register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: DIV, OpA: 15, OpB: 0, Expected: x, Received: 0
# Total tests passed: 1
# Total tests failed: 2
# Read from register location 3: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
#   rezultat = 2
# 
# Check PASSED: Calculated result matches DUT result. Opcode: SUB, OpA: 5, OpB: 3, Expected Result: 2
# Total tests passed: 2
# Total tests failed: 2
# Read from register location 4: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 1
# 
#   rezultat = 2
# 
# Check PASSED: Calculated result matches DUT result. Opcode: PASSA, OpA: 2, OpB: 1, Expected Result: 2
# Total tests passed: 3
# Total tests failed: 2
# Read from register location 5: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
# 
#   rezultat = 0
# 
# Check PASSED: Calculated result matches DUT result. Opcode: MOD, OpA: 11, OpB: 1, Expected Result: 0
# Total tests passed: 4
# Total tests failed: 2
# Read from register location 6: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# 
#   rezultat = 0
# 
# Check PASSED: Calculated result matches DUT result. Opcode: MOD, OpA: 9, OpB: 9, Expected Result: 0
# Total tests passed: 5
# Total tests failed: 2
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = -2
#   operand_b = 13
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: DIV, OpA: -2, OpB: 13, Expected: 330382099, Received: 0
# Total tests passed: 5
# Total tests failed: 3
# Read from register location 8: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
# 
#   rezultat = -9
# 
# Check PASSED: Calculated result matches DUT result. Opcode: MULT, OpA: -9, OpB: 1, Expected Result: -9
# Total tests passed: 6
# Total tests failed: 3
# Read from register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 9
# 
#   rezultat = 5
# 
# Check PASSED: Calculated result matches DUT result. Opcode: SUB, OpA: 14, OpB: 9, Expected Result: 5
# Total tests passed: 7
# Total tests failed: 3
# Read from register location 10: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 11
# 
#   rezultat = -10
# 
# Check PASSED: Calculated result matches DUT result. Opcode: SUB, OpA: 1, OpB: 11, Expected Result: -10
# Total tests passed: 8
# Total tests failed: 3
# Read from register location 11: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 2
# 
#   rezultat = -3
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: DIV, OpA: -6, OpB: 2, Expected: 2147483645, Received: -3
# Total tests passed: 8
# Total tests failed: 4
# Read from register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 12
# 
#   rezultat = 11
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: 11, OpB: 12, Expected: 0, Received: 11
# Total tests passed: 8
# Total tests failed: 5
# Read from register location 13: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: DIV, OpA: 13, OpB: 0, Expected: x, Received: 0
# Total tests passed: 8
# Total tests failed: 6
# Read from register location 14: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
# 
#   rezultat = 17
# 
# Check PASSED: Calculated result matches DUT result. Opcode: ADD, OpA: 12, OpB: 5, Expected Result: 17
# Total tests passed: 9
# Total tests failed: 6
# Read from register location 15: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 15
# 
#   rezultat = 21
# 
# Check PASSED: Calculated result matches DUT result. Opcode: ADD, OpA: 6, OpB: 15, Expected Result: 21
# Total tests passed: 10
# Total tests failed: 6
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 13
# 
#   rezultat = 15
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: 15, OpB: 13, Expected: 0, Received: 15
# Total tests passed: 10
# Total tests failed: 7
# Read from register location 17: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
# 
#   rezultat = 15
# 
# Check PASSED: Calculated result matches DUT result. Opcode: MULT, OpA: 1, OpB: 15, Expected Result: 15
# Total tests passed: 11
# Total tests failed: 7
# Read from register location 18: 
#   opcode = 4 (SUB)
#   operand_a = -11
#   operand_b = 11
# 
#   rezultat = -22
# 
# Check PASSED: Calculated result matches DUT result. Opcode: SUB, OpA: -11, OpB: 11, Expected Result: -22
# Total tests passed: 12
# Total tests failed: 7
# Read from register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 13
# 
#   rezultat = -9
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: -9, OpB: 13, Expected: 0, Received: -9
# Total tests passed: 12
# Total tests failed: 8
# Read from register location 20: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
# 
#   rezultat = -21
# 
# Check PASSED: Calculated result matches DUT result. Opcode: SUB, OpA: -13, OpB: 8, Expected Result: -21
# Total tests passed: 13
# Total tests failed: 8
# Read from register location 21: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# 
#   rezultat = 2
# 
# Check PASSED: Calculated result matches DUT result. Opcode: PASSA, OpA: 2, OpB: 14, Expected Result: 2
# Total tests passed: 14
# Total tests failed: 8
# Read from register location 22: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 1
# 
#   rezultat = -10
# 
# Check PASSED: Calculated result matches DUT result. Opcode: ADD, OpA: -11, OpB: 1, Expected Result: -10
# Total tests passed: 15
# Total tests failed: 8
# Read from register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
# 
#   rezultat = -11
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: -11, OpB: 15, Expected: 0, Received: -11
# Total tests passed: 15
# Total tests failed: 9
# Read from register location 24: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 8
# 
#   rezultat = 8
# 
# Check PASSED: Calculated result matches DUT result. Opcode: PASSB, OpA: 13, OpB: 8, Expected Result: 8
# Total tests passed: 16
# Total tests failed: 9
# Read from register location 25: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 14
# 
#   rezultat = 14
# 
# Check PASSED: Calculated result matches DUT result. Opcode: MULT, OpA: 1, OpB: 14, Expected Result: 14
# Total tests passed: 17
# Total tests failed: 9
# Read from register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
#   rezultat = -2
# 
# Check PASSED: Calculated result matches DUT result. Opcode: PASSA, OpA: -2, OpB: 9, Expected Result: -2
# Total tests passed: 18
# Total tests failed: 9
# Read from register location 27: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 15
# 
#   rezultat = -225
# 
# Check PASSED: Calculated result matches DUT result. Opcode: MULT, OpA: -15, OpB: 15, Expected Result: -225
# Total tests passed: 19
# Total tests failed: 9
# Read from register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 12
# 
#   rezultat = -60
# 
# Check PASSED: Calculated result matches DUT result. Opcode: MULT, OpA: -5, OpB: 12, Expected Result: -60
# Total tests passed: 20
# Total tests failed: 9
# Read from register location 29: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
#   rezultat = -4
# 
# Check PASSED: Calculated result matches DUT result. Opcode: ADD, OpA: -9, OpB: 5, Expected Result: -4
# Total tests passed: 21
# Total tests failed: 9
# Read from register location 30: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
#   rezultat = -14
# 
# Check PASSED: Calculated result matches DUT result. Opcode: SUB, OpA: 0, OpB: 14, Expected Result: -14
# Total tests passed: 22
# Total tests failed: 9
# 
# Total tests passed: 22
# Total tests failed: 9
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(80)
#    Time: 854 ns  Iteration: 1  Instance: /top/test
# End time: 09:23:01 on Apr 08,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
