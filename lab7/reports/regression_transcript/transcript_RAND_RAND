# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5c Compiler 2017.01 Jan 23 2017
# Start time: 09:22:52 on Apr 08,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Note: ../lab01_testbench-interface/instr_register_test.sv(159): (vlog-13177) Promoting concatenation '{opcode,operand_a,operand_b,...}' to an assignment pattern:  Unsized literal found.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 09:22:52 on Apr 08,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GWR_ORDER=1 -GRD_ORDER=1 -GRD_NR=10 -GWRITE_NR=10 
# Start time: 09:22:52 on Apr 08,2024
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# Total tests passed: 0
# Total tests failed: 0
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Writing to register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Writing to register location 29: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
# Writing to register location 3: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
# Writing to register location 28: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# 
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# Writing to register location 6: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# 
# Writing to register location 7: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
# 
# Writing to register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
# 
# Writing to register location 9: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
#   rezultat = -12
# 
# Check PASSED: Calculated result matches DUT result. Opcode: PASSA, OpA: -12, OpB: 7, Expected Result: -12
# Total tests passed: 1
# Total tests failed: 0
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: 0, OpB: 0, Expected: x, Received: 0
# Total tests passed: 1
# Total tests failed: 1
# Read from register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: 0, OpB: 0, Expected: x, Received: 0
# Total tests passed: 1
# Total tests failed: 2
# Read from register location 3: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
#   rezultat = 2
# 
# Check PASSED: Calculated result matches DUT result. Opcode: SUB, OpA: 5, OpB: 3, Expected Result: 2
# Total tests passed: 2
# Total tests failed: 2
# Read from register location 4: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: 0, OpB: 0, Expected: x, Received: 0
# Total tests passed: 2
# Total tests failed: 3
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: 0, OpB: 0, Expected: x, Received: 0
# Total tests passed: 2
# Total tests failed: 4
# Read from register location 6: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# 
#   rezultat = 0
# 
# Check PASSED: Calculated result matches DUT result. Opcode: MOD, OpA: 9, OpB: 9, Expected Result: 0
# Total tests passed: 3
# Total tests failed: 4
# Read from register location 7: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
# 
#   rezultat = 16
# 
# Check PASSED: Calculated result matches DUT result. Opcode: ADD, OpA: 9, OpB: 7, Expected Result: 16
# Total tests passed: 4
# Total tests failed: 4
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: 0, OpB: 0, Expected: x, Received: 0
# Total tests passed: 4
# Total tests failed: 5
# Read from register location 9: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: DIV, OpA: 15, OpB: 0, Expected: x, Received: 0
# Total tests passed: 4
# Total tests failed: 6
# Read from register location 10: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   rezultat = 0
# 
# Check FAILED: Mismatch between calculated and DUT result. Opcode: ZERO, OpA: 0, OpB: 0, Expected: x, Received: 0
# Total tests passed: 4
# Total tests failed: 7
# 
# Total tests passed: 4
# Total tests failed: 7
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(80)
#    Time: 254 ns  Iteration: 1  Instance: /top/test
# End time: 09:22:52 on Apr 08,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
